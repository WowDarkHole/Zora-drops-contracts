{
  "address": "0x9e5CC227FDD7a15246D295388e9444a597A0447B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SharedNFTLogic",
          "name": "_sharedNFTLogic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_animationUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_animationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_serialSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBPS",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintSerial",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "mintSerials",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serialSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_allowedMinters",
          "type": "address[]"
        }
      ],
      "name": "setAllowedMinters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_animationUrl",
          "type": "string"
        }
      ],
      "name": "updateSerialURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9d178d146c0655851bbba57981bad21bab6f89733447952222db3db6764abcd",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0x9e5CC227FDD7a15246D295388e9444a597A0447B",
    "transactionIndex": 5,
    "gasUsed": "1975950",
    "logsBloom": "0x
    "blockHash": "0xd0ed2a54f635de1b08660fd1b47077dbc09129e75e75e83db5bc322631d8d194",
    "transactionHash": "0xb9d178d146c0655851bbba57981bad21bab6f89733447952222db3db6764abcd",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 18723646,
        "transactionHash": "0xb9d178d146c0655851bbba57981bad21bab6f89733447952222db3db6764abcd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003828edaec06000000000000000000000000000000000000000000000000000028ec13786efe6000000000000000000000000000000000000000000000000000271a6214258f5ff00000000000000000000000000000000000000000000000002569849d82f860000000000000000000000000000000000000000000000000002a9cf0ef11955ff",
        "logIndex": 22,
        "blockHash": "0xd0ed2a54f635de1b08660fd1b47077dbc09129e75e75e83db5bc322631d8d194"
      }
    ],
    "blockNumber": 18723646,
    "cumulativeGasUsed": "3055281",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3d8D4c9C0Fc75ec38A7E6169742Ad98A9Ea31960"
  ],
  "solcInputHash": "26bc9eaa72bafdec360511c19de0b3e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SharedNFTLogic\",\"name\":\"_sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_serialSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBPS\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintSerial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintSerials\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serialSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_allowedMinters\",\"type\":\"address[]\"}],\"name\":\"setAllowedMinters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"}],\"name\":\"updateSerialURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"iain nash Repository: https://github.com/ourzora/nft-editions\",\"details\":\"This allows creators to mint a unique series within a custom contract\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getURIs()\":{\"details\":\"Get URIs for serial NFT\",\"returns\":{\"_0\":\"imageUrl, imageHash, animationUrl, animationHash\"}},\"initialize(address,string,string,string,string,bytes32,string,bytes32,uint256,uint256)\":{\"details\":\"Function to create a new serial. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the serial. This can be re-assigned or updated later\",\"params\":{\"_animationHash\":\"The associated hash of the animation in sha-256 bytes32 format. If animation is omitted \",\"_animationUrl\":\"Animation URL of the serial. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\",\"_description\":\"Description of serial, used in the description field of the NFT\",\"_imageHash\":\"SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero (bytes32 type)\",\"_imageUrl\":\"Image URL of the serial. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a serial to render the NFT.\",\"_name\":\"Name of serial, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\",\"_owner\":\"Owner of serial\",\"_royaltyBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty.\",\"_serialSize\":\"Number of serials that can be minted in total.\",\"_symbol\":\"Symbol of the new token contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintSerial(address)\":{\"details\":\"This mints one serial to the given address by an allowed minter on the serial instance.\",\"params\":{\"to\":\"address to send the newly minted serial to\"}},\"mintSerials(address[])\":{\"details\":\"This mints multiple serials to the given list of addresses.\",\"params\":{\"recipients\":\"list of addresses to send the newly minted serials to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty information for token\",\"params\":{\"_salePrice\":\"Sale price for the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAllowedMinters(address[])\":{\"details\":\"Set the allowed minters array for a given serial id This requires that msg.sender is the owner of the given serial id.\",\"params\":{\"_allowedMinters\":\"list of addresses allowed to mint this serial\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Get URI for given token id\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"base64-encoded json metadata object\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSerialURLs(string,string)\":{\"details\":\"Allows for updates of serial urls by the owner of the serial. Only URLs can be updated (data-uris are supported), hashes cannot be updated.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is a smart contract for handling dynamic contract minting.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleEditionMintable.sol\":\"SingleEditionMintable\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/ISerialSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\ninterface ISerialSingleMintable {\\n  function mintSerial(address to) external returns (uint256);\\n  function mintSerials(address[] memory to) external returns (uint256);\\n}\",\"keccak256\":\"0x05f1b234ea62f191141b44ea9b98cb75811939b095e5774a7e9af26e9609234e\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\n\\ncontract SharedNFTLogic {\\n    function base64Encode(bytes memory args)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return Base64.encode(args);\\n    }\\n\\n    function numberToString(uint256 value) public pure returns (string memory) {\\n        return Strings.toString(value);\\n    }\\n\\n    function createMetadataSerial(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfSerial,\\n        uint256 serialSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfSerial\\n        );\\n        bytes memory json = createMetadataJSON( \\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfSerial,\\n            serialSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfSerial,\\n        uint256 serialSize\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                Strings.toString(tokenOfSerial),\\n                \\\"/\\\",\\n                Strings.toString(serialSize),\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                Strings.toString(tokenOfSerial),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfSerial\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfSerial),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfSerial),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfSerial),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfSerial),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x5f900d2e40273f335f444a963e52430bfd826bf53421f093eeb05f705e92f33b\",\"license\":\"GPL-3.0\"},\"contracts/SingleEditionMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SharedNFTLogic} from \\\"./SharedNFTLogic.sol\\\";\\nimport {ISerialSingleMintable} from \\\"./ISerialSingleMintable.sol\\\";\\n\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    @dev This allows creators to mint a unique series within a custom contract\\n    @author iain nash\\n    Repository: https://github.com/ourzora/nft-editions\\n*/\\ncontract SingleEditionMintable is\\n    ISerialSingleMintable,\\n    ERC721Upgradeable,\\n    OwnableUpgradeable,\\n    IERC2981Upgradeable\\n{\\n    // metadata\\n    string private description;\\n\\n    // media urls\\n    // animation_url field in the metadata\\n    string private animationUrl;\\n    // hash for the associated animation\\n    bytes32 private animationHash;\\n    // image in the metadata\\n    string private imageUrl;\\n    // hash for the associated image\\n    bytes32 private imageHash;\\n\\n    // total size of serial that can be minted\\n    uint256 public serialSize;\\n    // current token id minted\\n    uint256 private atSerialId;\\n    // royalty amount in bps\\n    uint256 royaltyBPS;\\n    // addresses allowed to mint serial\\n    address[] allowedMinters;\\n    SharedNFTLogic private immutable sharedNFTLogic;\\n\\n    constructor(SharedNFTLogic _sharedNFTLogic) {\\n        sharedNFTLogic = _sharedNFTLogic;\\n    }\\n\\n    /**\\n      @param _owner Owner of serial\\n      @param _name Name of serial, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _description Description of serial, used in the description field of the NFT\\n      @param _imageUrl Image URL of the serial. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a serial to render the NFT.\\n      @param _imageHash SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero (bytes32 type)\\n      @param _animationUrl Animation URL of the serial. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\\n      @param _animationHash The associated hash of the animation in sha-256 bytes32 format. If animation is omitted \\n      @param _serialSize Number of serials that can be minted in total.\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @dev Function to create a new serial. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the serial.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _serialSize,\\n        uint256 _royaltyBPS\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n        description = _description;\\n        animationUrl = _animationUrl;\\n        animationHash = _animationHash;\\n        imageUrl = _imageUrl;\\n        imageHash = _imageHash;\\n        serialSize = _serialSize;\\n        royaltyBPS = _royaltyBPS;\\n        allowedMinters.push(msg.sender);\\n        // Set serial id\\n        atSerialId = 1;\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given serial id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (owner() == msg.sender) {\\n            return true;\\n        }\\n        uint256 allowedMintersCount = allowedMinters.length;\\n        // todo(iain): update allowed minters?\\n        if (allowedMintersCount == 0) {\\n            return true;\\n        }\\n        for (uint256 i = 0; i < allowedMintersCount; i++) {\\n            if (allowedMinters[i] == msg.sender) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n      @param to address to send the newly minted serial to\\n      @dev This mints one serial to the given address by an allowed minter on the serial instance.\\n     */\\n    function mintSerial(address to) external override returns (uint256) {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = to;\\n        return _mintSerials(toMint);\\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted serials to\\n      @dev This mints multiple serials to the given list of addresses.\\n     */\\n    function mintSerials(address[] memory recipients)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        return _mintSerials(recipients);\\n    }\\n\\n    /**\\n      @param _allowedMinters list of addresses allowed to mint this serial\\n      @dev Set the allowed minters array for a given serial id\\n           This requires that msg.sender is the owner of the given serial id.\\n     */\\n    function setAllowedMinters(address[] memory _allowedMinters)\\n        public\\n        onlyOwner\\n    {\\n        allowedMinters = _allowedMinters;\\n    }\\n\\n    /**\\n      @dev Allows for updates of serial urls by the owner of the serial.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n     */\\n    function updateSerialURLs(\\n        string memory _imageUrl,\\n        string memory _animationUrl\\n    ) public onlyOwner {\\n        imageUrl = _imageUrl;\\n        animationUrl = _animationUrl;\\n    }\\n\\n    /**\\n      @dev Private function to mint als without any access checks.\\n           Called by the public serial minting functions.\\n     */\\n    function _mintSerials(address[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 startAt = atSerialId;\\n        uint256 endAt = startAt + recipients.length - 1;\\n        require(endAt <= serialSize, \\\"SOLD OUT\\\");\\n        while (atSerialId <= endAt) {\\n            _mint(recipients[atSerialId - startAt], atSerialId);\\n            atSerialId++;\\n        }\\n        return atSerialId;\\n    }\\n\\n    /**\\n      @dev Get URIs for serial NFT\\n      @return imageUrl, imageHash, animationUrl, animationHash\\n     */\\n    function getURIs()\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        return (imageUrl, imageHash, animationUrl, animationHash);\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"NO TOKEN\\\");\\n\\n        return\\n            sharedNFTLogic.createMetadataSerial(\\n                name(),\\n                description,\\n                imageUrl,\\n                animationUrl,\\n                tokenId,\\n                serialSize\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb6acaa04ae1fd88f7f3b35fc7957d41fe7083ad53fac0c9982db6135d2d7825c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051620023543803806200235483398101604081905261003191610046565b60601b6001600160601b031916608052610076565b60006020828403121561005857600080fd5b81516001600160a01b038116811461006f57600080fd5b9392505050565b60805160601c6122bf620000956000396000610cab01526122bf6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063af12bf1d1161007c578063af12bf1d146102f5578063b86d3f7f146102fe578063b88d4fde14610311578063c87b56dd14610324578063e985e9c514610337578063f2fde38b1461034a57600080fd5b806370a08231146102a4578063715018a6146102b7578063822c3f8e146102bf5780638da5cb5b146102d257806395d89b41146102da578063a22cb465146102e257600080fd5b806325f0ea901161011557806325f0ea901461020e57806328c5440f146102215780632a55205a1461023957806331ac62e81461026b57806342842e0e1461027e5780636352211e1461029157600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c5578063159f5d12146101da57806323b872dd146101fb575b600080fd5b61017061016b366004611c81565b61035d565b60405190151581526020015b60405180910390f35b61018d610388565b60405161017c9190611ed8565b6101ad6101a8366004611d94565b61041a565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004611ba4565b6104a7565b005b6101ed6101e8366004611959565b6105b8565b60405190815260200161017c565b6101d86102093660046119a7565b610644565b6101d861021c366004611a9a565b610675565b61022961079c565b60405161017c9493929190611eeb565b61024c610247366004611dad565b6108d4565b604080516001600160a01b03909316835260208301919091520161017c565b6101ed610279366004611bce565b610931565b6101d861028c3660046119a7565b610960565b6101ad61029f366004611d94565b61097b565b6101ed6102b2366004611959565b6109f2565b6101d8610a79565b6101d86102cd366004611d31565b610ab4565b6101ad610b0a565b61018d610b19565b6101d86102f0366004611a5e565b610b28565b6101ed60ce5481565b6101d861030c366004611bce565b610be9565b6101d861031f3660046119e3565b610c2f565b61018d610332366004611d94565b610c67565b610170610345366004611974565b610d5f565b6101d8610358366004611959565b610d8d565b600063152a902d60e11b6001600160e01b031983161480610382575061038282610e2d565b92915050565b606060658054610397906121db565b80601f01602080910402602001604051908101604052809291908181526020018280546103c3906121db565b80156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b5050505050905090565b600061042582610e7d565b61048b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006104b28261097b565b9050806001600160a01b0316836001600160a01b031614156105205760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610482565b336001600160a01b038216148061053c575061053c8133610d5f565b6105a95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610482565b6105b38383610e9a565b505050565b60006105c2610f08565b6105de5760405162461bcd60e51b815260040161048290612060565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061061457610614612247565b60200260200101906001600160a01b031690816001600160a01b03168152505061063d81610f9f565b9392505050565b61064e3382611061565b61066a5760405162461bcd60e51b815260040161048290612097565b6105b383838361112b565b600054610100900460ff168061068e575060005460ff16155b6106aa5760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156106cc576000805461ffff19166101011790555b6106d68a8a6112cb565b6106de611352565b6106e78b610d8d565b87516106fa9060c99060208b01906117f1565b50865161070e9060ca9060208a01906117f1565b5060cb86905584516107279060cc9060208801906117f1565b5060cd84905560ce83905560d082905560d18054600181810183556000929092527f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce30180546001600160a01b0319163317905560cf55801561078f576000805461ff00191690555b5050505050505050505050565b606060006060600060cc60cd5460ca60cb548380546107ba906121db565b80601f01602080910402602001604051908101604052809291908181526020018280546107e6906121db565b80156108335780601f1061080857610100808354040283529160200191610833565b820191906000526020600020905b81548152906001019060200180831161081657829003601f168201915b50505050509350818054610846906121db565b80601f0160208091040260200160405190810160405280929190818152602001828054610872906121db565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b50505050509150935093509350935090919293565b600080806108e0610b0a565b6001600160a01b03161415610902576108f7610b0a565b60009150915061092a565b61090a610b0a565b61271060d0548561091b9190612179565b6109259190612157565b915091505b9250929050565b600061093b610f08565b6109575760405162461bcd60e51b815260040161048290612060565b61038282610f9f565b6105b383838360405180602001604052806000815250610c2f565b6000818152606760205260408120546001600160a01b0316806103825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610482565b60006001600160a01b038216610a5d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610482565b506001600160a01b031660009081526068602052604090205490565b33610a82610b0a565b6001600160a01b031614610aa85760405162461bcd60e51b81526004016104829061202b565b610ab260006113cd565b565b33610abd610b0a565b6001600160a01b031614610ae35760405162461bcd60e51b81526004016104829061202b565b8151610af69060cc9060208501906117f1565b5080516105b39060ca9060208401906117f1565b6097546001600160a01b031690565b606060668054610397906121db565b6001600160a01b038216331415610b7d5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610482565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b33610bf2610b0a565b6001600160a01b031614610c185760405162461bcd60e51b81526004016104829061202b565b8051610c2b9060d1906020840190611875565b5050565b610c393383611061565b610c555760405162461bcd60e51b815260040161048290612097565b610c618484848461141f565b50505050565b6060610c7282610e7d565b610ca95760405162461bcd60e51b81526020600482015260086024820152672727902a27a5a2a760c11b6044820152606401610482565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d32a2623610ce0610388565b60c960cc60ca8760ce546040518763ffffffff1660e01b8152600401610d0b96959493929190611f28565b60006040518083038186803b158015610d2357600080fd5b505afa158015610d37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103829190810190611cbb565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b33610d96610b0a565b6001600160a01b031614610dbc5760405162461bcd60e51b81526004016104829061202b565b6001600160a01b038116610e215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610482565b610e2a816113cd565b50565b60006001600160e01b031982166380ac58cd60e01b1480610e5e57506001600160e01b03198216635b5e139f60e01b145b8061038257506301ffc9a760e01b6001600160e01b0319831614610382565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ecf8261097b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600033610f13610b0a565b6001600160a01b03161415610f285750600190565b60d15480610f3857600191505090565b60005b81811015610f9657336001600160a01b031660d18281548110610f6057610f60612247565b6000918252602090912001546001600160a01b03161415610f845760019250505090565b80610f8e81612216565b915050610f3b565b50600091505090565b60008060cf54905060006001845183610fb8919061213f565b610fc29190612198565b905060ce548111156110015760405162461bcd60e51b815260206004820152600860248201526714d3d3110813d55560c21b6044820152606401610482565b8060cf54116110565761103c848360cf5461101c9190612198565b8151811061102c5761102c612247565b602002602001015160cf54611452565b60cf805490600061104c83612216565b9190505550611001565b505060cf5492915050565b600061106c82610e7d565b6110cd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610482565b60006110d88361097b565b9050806001600160a01b0316846001600160a01b031614806111135750836001600160a01b03166111088461041a565b6001600160a01b0316145b8061112357506111238185610d5f565b949350505050565b826001600160a01b031661113e8261097b565b6001600160a01b0316146111a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610482565b6001600160a01b0382166112085760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610482565b611213600082610e9a565b6001600160a01b038316600090815260686020526040812080546001929061123c908490612198565b90915550506001600160a01b038216600090815260686020526040812080546001929061126a90849061213f565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16806112e4575060005460ff16155b6113005760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff16158015611322576000805461ffff19166101011790555b61132a611585565b611332611585565b61133c83836115ef565b80156105b3576000805461ff0019169055505050565b600054610100900460ff168061136b575060005460ff16155b6113875760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156113a9576000805461ffff19166101011790555b6113b1611585565b6113b9611684565b8015610e2a576000805461ff001916905550565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61142a84848461112b565b611436848484846116e4565b610c615760405162461bcd60e51b815260040161048290611f8b565b6001600160a01b0382166114a85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610482565b6114b181610e7d565b156114fe5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610482565b6001600160a01b038216600090815260686020526040812080546001929061152790849061213f565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff168061159e575060005460ff16155b6115ba5760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156113b9576000805461ffff19166101011790558015610e2a576000805461ff001916905550565b600054610100900460ff1680611608575060005460ff16155b6116245760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff16158015611646576000805461ffff19166101011790555b82516116599060659060208601906117f1565b50815161166d9060669060208501906117f1565b5080156105b3576000805461ff0019169055505050565b600054610100900460ff168061169d575060005460ff16155b6116b95760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156116db576000805461ffff19166101011790555b6113b9336113cd565b60006001600160a01b0384163b156117e657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611728903390899088908890600401611e9b565b602060405180830381600087803b15801561174257600080fd5b505af1925050508015611772575060408051601f3d908101601f1916820190925261176f91810190611c9e565b60015b6117cc573d8080156117a0576040519150601f19603f3d011682016040523d82523d6000602084013e6117a5565b606091505b5080516117c45760405162461bcd60e51b815260040161048290611f8b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611123565b506001949350505050565b8280546117fd906121db565b90600052602060002090601f01602090048101928261181f5760008555611865565b82601f1061183857805160ff1916838001178555611865565b82800160010185558215611865579182015b8281111561186557825182559160200191906001019061184a565b506118719291506118ca565b5090565b828054828255906000526020600020908101928215611865579160200282015b8281111561186557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611895565b5b8082111561187157600081556001016118cb565b60006118f26118ed84612118565b6120e8565b905082815283838301111561190657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461193457600080fd5b919050565b600082601f83011261194a57600080fd5b61063d838335602085016118df565b60006020828403121561196b57600080fd5b61063d8261191d565b6000806040838503121561198757600080fd5b6119908361191d565b915061199e6020840161191d565b90509250929050565b6000806000606084860312156119bc57600080fd5b6119c58461191d565b92506119d36020850161191d565b9150604084013590509250925092565b600080600080608085870312156119f957600080fd5b611a028561191d565b9350611a106020860161191d565b92506040850135915060608501356001600160401b03811115611a3257600080fd5b8501601f81018713611a4357600080fd5b611a52878235602084016118df565b91505092959194509250565b60008060408385031215611a7157600080fd5b611a7a8361191d565b915060208301358015158114611a8f57600080fd5b809150509250929050565b6000806000806000806000806000806101408b8d031215611aba57600080fd5b611ac38b61191d565b995060208b01356001600160401b0380821115611adf57600080fd5b611aeb8e838f01611939565b9a5060408d0135915080821115611b0157600080fd5b611b0d8e838f01611939565b995060608d0135915080821115611b2357600080fd5b611b2f8e838f01611939565b985060808d0135915080821115611b4557600080fd5b611b518e838f01611939565b975060a08d0135965060c08d0135915080821115611b6e57600080fd5b50611b7b8d828e01611939565b94505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b60008060408385031215611bb757600080fd5b611bc08361191d565b946020939093013593505050565b60006020808385031215611be157600080fd5b82356001600160401b0380821115611bf857600080fd5b818501915085601f830112611c0c57600080fd5b813581811115611c1e57611c1e61225d565b8060051b9150611c2f8483016120e8565b8181528481019084860184860187018a1015611c4a57600080fd5b600095505b83861015611c7457611c608161191d565b835260019590950194918601918601611c4f565b5098975050505050505050565b600060208284031215611c9357600080fd5b813561063d81612273565b600060208284031215611cb057600080fd5b815161063d81612273565b600060208284031215611ccd57600080fd5b81516001600160401b03811115611ce357600080fd5b8201601f81018413611cf457600080fd5b8051611d026118ed82612118565b818152856020838501011115611d1757600080fd5b611d288260208301602086016121af565b95945050505050565b60008060408385031215611d4457600080fd5b82356001600160401b0380821115611d5b57600080fd5b611d6786838701611939565b93506020850135915080821115611d7d57600080fd5b50611d8a85828601611939565b9150509250929050565b600060208284031215611da657600080fd5b5035919050565b60008060408385031215611dc057600080fd5b50508035926020909101359150565b60008151808452611de78160208601602086016121af565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680611e1557607f831692505b6020808410821415611e3757634e487b7160e01b600052602260045260246000fd5b83885260208801828015611e525760018114611e6357611e8e565b60ff19871682528282019750611e8e565b60008981526020902060005b87811015611e8857815484820152908601908401611e6f565b83019850505b5050505050505092915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ece90830184611dcf565b9695505050505050565b60208152600061063d6020830184611dcf565b608081526000611efe6080830187611dcf565b8560208401528281036040840152611f168186611dcf565b91505082606083015295945050505050565b60c081526000611f3b60c0830189611dcf565b8281036020840152611f4d8189611dfb565b90508281036040840152611f618188611dfb565b90508281036060840152611f758187611dfb565b6080840195909552505060a00152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4e6565647320746f20626520616e20616c6c6f776564206d696e746572000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f191681016001600160401b03811182821017156121105761211061225d565b604052919050565b60006001600160401b038211156121315761213161225d565b50601f01601f191660200190565b6000821982111561215257612152612231565b500190565b60008261217457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561219357612193612231565b500290565b6000828210156121aa576121aa612231565b500390565b60005b838110156121ca5781810151838201526020016121b2565b83811115610c615750506000910152565b600181811c908216806121ef57607f821691505b6020821081141561221057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561222a5761222a612231565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e2a57600080fdfea2646970667358221220187fe68556c3f8e3c5be302f28403cbd79f98422ef3814f90e00292ea3aab8ac64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063af12bf1d1161007c578063af12bf1d146102f5578063b86d3f7f146102fe578063b88d4fde14610311578063c87b56dd14610324578063e985e9c514610337578063f2fde38b1461034a57600080fd5b806370a08231146102a4578063715018a6146102b7578063822c3f8e146102bf5780638da5cb5b146102d257806395d89b41146102da578063a22cb465146102e257600080fd5b806325f0ea901161011557806325f0ea901461020e57806328c5440f146102215780632a55205a1461023957806331ac62e81461026b57806342842e0e1461027e5780636352211e1461029157600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c5578063159f5d12146101da57806323b872dd146101fb575b600080fd5b61017061016b366004611c81565b61035d565b60405190151581526020015b60405180910390f35b61018d610388565b60405161017c9190611ed8565b6101ad6101a8366004611d94565b61041a565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004611ba4565b6104a7565b005b6101ed6101e8366004611959565b6105b8565b60405190815260200161017c565b6101d86102093660046119a7565b610644565b6101d861021c366004611a9a565b610675565b61022961079c565b60405161017c9493929190611eeb565b61024c610247366004611dad565b6108d4565b604080516001600160a01b03909316835260208301919091520161017c565b6101ed610279366004611bce565b610931565b6101d861028c3660046119a7565b610960565b6101ad61029f366004611d94565b61097b565b6101ed6102b2366004611959565b6109f2565b6101d8610a79565b6101d86102cd366004611d31565b610ab4565b6101ad610b0a565b61018d610b19565b6101d86102f0366004611a5e565b610b28565b6101ed60ce5481565b6101d861030c366004611bce565b610be9565b6101d861031f3660046119e3565b610c2f565b61018d610332366004611d94565b610c67565b610170610345366004611974565b610d5f565b6101d8610358366004611959565b610d8d565b600063152a902d60e11b6001600160e01b031983161480610382575061038282610e2d565b92915050565b606060658054610397906121db565b80601f01602080910402602001604051908101604052809291908181526020018280546103c3906121db565b80156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b5050505050905090565b600061042582610e7d565b61048b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006104b28261097b565b9050806001600160a01b0316836001600160a01b031614156105205760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610482565b336001600160a01b038216148061053c575061053c8133610d5f565b6105a95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610482565b6105b38383610e9a565b505050565b60006105c2610f08565b6105de5760405162461bcd60e51b815260040161048290612060565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061061457610614612247565b60200260200101906001600160a01b031690816001600160a01b03168152505061063d81610f9f565b9392505050565b61064e3382611061565b61066a5760405162461bcd60e51b815260040161048290612097565b6105b383838361112b565b600054610100900460ff168061068e575060005460ff16155b6106aa5760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156106cc576000805461ffff19166101011790555b6106d68a8a6112cb565b6106de611352565b6106e78b610d8d565b87516106fa9060c99060208b01906117f1565b50865161070e9060ca9060208a01906117f1565b5060cb86905584516107279060cc9060208801906117f1565b5060cd84905560ce83905560d082905560d18054600181810183556000929092527f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce30180546001600160a01b0319163317905560cf55801561078f576000805461ff00191690555b5050505050505050505050565b606060006060600060cc60cd5460ca60cb548380546107ba906121db565b80601f01602080910402602001604051908101604052809291908181526020018280546107e6906121db565b80156108335780601f1061080857610100808354040283529160200191610833565b820191906000526020600020905b81548152906001019060200180831161081657829003601f168201915b50505050509350818054610846906121db565b80601f0160208091040260200160405190810160405280929190818152602001828054610872906121db565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b50505050509150935093509350935090919293565b600080806108e0610b0a565b6001600160a01b03161415610902576108f7610b0a565b60009150915061092a565b61090a610b0a565b61271060d0548561091b9190612179565b6109259190612157565b915091505b9250929050565b600061093b610f08565b6109575760405162461bcd60e51b815260040161048290612060565b61038282610f9f565b6105b383838360405180602001604052806000815250610c2f565b6000818152606760205260408120546001600160a01b0316806103825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610482565b60006001600160a01b038216610a5d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610482565b506001600160a01b031660009081526068602052604090205490565b33610a82610b0a565b6001600160a01b031614610aa85760405162461bcd60e51b81526004016104829061202b565b610ab260006113cd565b565b33610abd610b0a565b6001600160a01b031614610ae35760405162461bcd60e51b81526004016104829061202b565b8151610af69060cc9060208501906117f1565b5080516105b39060ca9060208401906117f1565b6097546001600160a01b031690565b606060668054610397906121db565b6001600160a01b038216331415610b7d5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610482565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b33610bf2610b0a565b6001600160a01b031614610c185760405162461bcd60e51b81526004016104829061202b565b8051610c2b9060d1906020840190611875565b5050565b610c393383611061565b610c555760405162461bcd60e51b815260040161048290612097565b610c618484848461141f565b50505050565b6060610c7282610e7d565b610ca95760405162461bcd60e51b81526020600482015260086024820152672727902a27a5a2a760c11b6044820152606401610482565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d32a2623610ce0610388565b60c960cc60ca8760ce546040518763ffffffff1660e01b8152600401610d0b96959493929190611f28565b60006040518083038186803b158015610d2357600080fd5b505afa158015610d37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103829190810190611cbb565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b33610d96610b0a565b6001600160a01b031614610dbc5760405162461bcd60e51b81526004016104829061202b565b6001600160a01b038116610e215760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610482565b610e2a816113cd565b50565b60006001600160e01b031982166380ac58cd60e01b1480610e5e57506001600160e01b03198216635b5e139f60e01b145b8061038257506301ffc9a760e01b6001600160e01b0319831614610382565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610ecf8261097b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600033610f13610b0a565b6001600160a01b03161415610f285750600190565b60d15480610f3857600191505090565b60005b81811015610f9657336001600160a01b031660d18281548110610f6057610f60612247565b6000918252602090912001546001600160a01b03161415610f845760019250505090565b80610f8e81612216565b915050610f3b565b50600091505090565b60008060cf54905060006001845183610fb8919061213f565b610fc29190612198565b905060ce548111156110015760405162461bcd60e51b815260206004820152600860248201526714d3d3110813d55560c21b6044820152606401610482565b8060cf54116110565761103c848360cf5461101c9190612198565b8151811061102c5761102c612247565b602002602001015160cf54611452565b60cf805490600061104c83612216565b9190505550611001565b505060cf5492915050565b600061106c82610e7d565b6110cd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610482565b60006110d88361097b565b9050806001600160a01b0316846001600160a01b031614806111135750836001600160a01b03166111088461041a565b6001600160a01b0316145b8061112357506111238185610d5f565b949350505050565b826001600160a01b031661113e8261097b565b6001600160a01b0316146111a65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610482565b6001600160a01b0382166112085760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610482565b611213600082610e9a565b6001600160a01b038316600090815260686020526040812080546001929061123c908490612198565b90915550506001600160a01b038216600090815260686020526040812080546001929061126a90849061213f565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16806112e4575060005460ff16155b6113005760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff16158015611322576000805461ffff19166101011790555b61132a611585565b611332611585565b61133c83836115ef565b80156105b3576000805461ff0019169055505050565b600054610100900460ff168061136b575060005460ff16155b6113875760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156113a9576000805461ffff19166101011790555b6113b1611585565b6113b9611684565b8015610e2a576000805461ff001916905550565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61142a84848461112b565b611436848484846116e4565b610c615760405162461bcd60e51b815260040161048290611f8b565b6001600160a01b0382166114a85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610482565b6114b181610e7d565b156114fe5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610482565b6001600160a01b038216600090815260686020526040812080546001929061152790849061213f565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff168061159e575060005460ff16155b6115ba5760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156113b9576000805461ffff19166101011790558015610e2a576000805461ff001916905550565b600054610100900460ff1680611608575060005460ff16155b6116245760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff16158015611646576000805461ffff19166101011790555b82516116599060659060208601906117f1565b50815161166d9060669060208501906117f1565b5080156105b3576000805461ff0019169055505050565b600054610100900460ff168061169d575060005460ff16155b6116b95760405162461bcd60e51b815260040161048290611fdd565b600054610100900460ff161580156116db576000805461ffff19166101011790555b6113b9336113cd565b60006001600160a01b0384163b156117e657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611728903390899088908890600401611e9b565b602060405180830381600087803b15801561174257600080fd5b505af1925050508015611772575060408051601f3d908101601f1916820190925261176f91810190611c9e565b60015b6117cc573d8080156117a0576040519150601f19603f3d011682016040523d82523d6000602084013e6117a5565b606091505b5080516117c45760405162461bcd60e51b815260040161048290611f8b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611123565b506001949350505050565b8280546117fd906121db565b90600052602060002090601f01602090048101928261181f5760008555611865565b82601f1061183857805160ff1916838001178555611865565b82800160010185558215611865579182015b8281111561186557825182559160200191906001019061184a565b506118719291506118ca565b5090565b828054828255906000526020600020908101928215611865579160200282015b8281111561186557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611895565b5b8082111561187157600081556001016118cb565b60006118f26118ed84612118565b6120e8565b905082815283838301111561190657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461193457600080fd5b919050565b600082601f83011261194a57600080fd5b61063d838335602085016118df565b60006020828403121561196b57600080fd5b61063d8261191d565b6000806040838503121561198757600080fd5b6119908361191d565b915061199e6020840161191d565b90509250929050565b6000806000606084860312156119bc57600080fd5b6119c58461191d565b92506119d36020850161191d565b9150604084013590509250925092565b600080600080608085870312156119f957600080fd5b611a028561191d565b9350611a106020860161191d565b92506040850135915060608501356001600160401b03811115611a3257600080fd5b8501601f81018713611a4357600080fd5b611a52878235602084016118df565b91505092959194509250565b60008060408385031215611a7157600080fd5b611a7a8361191d565b915060208301358015158114611a8f57600080fd5b809150509250929050565b6000806000806000806000806000806101408b8d031215611aba57600080fd5b611ac38b61191d565b995060208b01356001600160401b0380821115611adf57600080fd5b611aeb8e838f01611939565b9a5060408d0135915080821115611b0157600080fd5b611b0d8e838f01611939565b995060608d0135915080821115611b2357600080fd5b611b2f8e838f01611939565b985060808d0135915080821115611b4557600080fd5b611b518e838f01611939565b975060a08d0135965060c08d0135915080821115611b6e57600080fd5b50611b7b8d828e01611939565b94505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b60008060408385031215611bb757600080fd5b611bc08361191d565b946020939093013593505050565b60006020808385031215611be157600080fd5b82356001600160401b0380821115611bf857600080fd5b818501915085601f830112611c0c57600080fd5b813581811115611c1e57611c1e61225d565b8060051b9150611c2f8483016120e8565b8181528481019084860184860187018a1015611c4a57600080fd5b600095505b83861015611c7457611c608161191d565b835260019590950194918601918601611c4f565b5098975050505050505050565b600060208284031215611c9357600080fd5b813561063d81612273565b600060208284031215611cb057600080fd5b815161063d81612273565b600060208284031215611ccd57600080fd5b81516001600160401b03811115611ce357600080fd5b8201601f81018413611cf457600080fd5b8051611d026118ed82612118565b818152856020838501011115611d1757600080fd5b611d288260208301602086016121af565b95945050505050565b60008060408385031215611d4457600080fd5b82356001600160401b0380821115611d5b57600080fd5b611d6786838701611939565b93506020850135915080821115611d7d57600080fd5b50611d8a85828601611939565b9150509250929050565b600060208284031215611da657600080fd5b5035919050565b60008060408385031215611dc057600080fd5b50508035926020909101359150565b60008151808452611de78160208601602086016121af565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680611e1557607f831692505b6020808410821415611e3757634e487b7160e01b600052602260045260246000fd5b83885260208801828015611e525760018114611e6357611e8e565b60ff19871682528282019750611e8e565b60008981526020902060005b87811015611e8857815484820152908601908401611e6f565b83019850505b5050505050505092915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611ece90830184611dcf565b9695505050505050565b60208152600061063d6020830184611dcf565b608081526000611efe6080830187611dcf565b8560208401528281036040840152611f168186611dcf565b91505082606083015295945050505050565b60c081526000611f3b60c0830189611dcf565b8281036020840152611f4d8189611dfb565b90508281036040840152611f618188611dfb565b90508281036060840152611f758187611dfb565b6080840195909552505060a00152949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4e6565647320746f20626520616e20616c6c6f776564206d696e746572000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f191681016001600160401b03811182821017156121105761211061225d565b604052919050565b60006001600160401b038211156121315761213161225d565b50601f01601f191660200190565b6000821982111561215257612152612231565b500190565b60008261217457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561219357612193612231565b500290565b6000828210156121aa576121aa612231565b500390565b60005b838110156121ca5781810151838201526020016121b2565b83811115610c615750506000910152565b600181811c908216806121ef57607f821691505b6020821081141561221057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561222a5761222a612231565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e2a57600080fdfea2646970667358221220187fe68556c3f8e3c5be302f28403cbd79f98422ef3814f90e00292ea3aab8ac64736f6c63430008060033",
  "devdoc": {
    "author": "iain nash Repository: https://github.com/ourzora/nft-editions",
    "details": "This allows creators to mint a unique series within a custom contract",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getURIs()": {
        "details": "Get URIs for serial NFT",
        "returns": {
          "_0": "imageUrl, imageHash, animationUrl, animationHash"
        }
      },
      "initialize(address,string,string,string,string,bytes32,string,bytes32,uint256,uint256)": {
        "details": "Function to create a new serial. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the serial. This can be re-assigned or updated later",
        "params": {
          "_animationHash": "The associated hash of the animation in sha-256 bytes32 format. If animation is omitted ",
          "_animationUrl": "Animation URL of the serial. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs",
          "_description": "Description of serial, used in the description field of the NFT",
          "_imageHash": "SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero (bytes32 type)",
          "_imageUrl": "Image URL of the serial. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a serial to render the NFT.",
          "_name": "Name of serial, used in the title as \"$NAME NUMBER/TOTAL\"",
          "_owner": "Owner of serial",
          "_royaltyBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty.",
          "_serialSize": "Number of serials that can be minted in total.",
          "_symbol": "Symbol of the new token contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintSerial(address)": {
        "details": "This mints one serial to the given address by an allowed minter on the serial instance.",
        "params": {
          "to": "address to send the newly minted serial to"
        }
      },
      "mintSerials(address[])": {
        "details": "This mints multiple serials to the given list of addresses.",
        "params": {
          "recipients": "list of addresses to send the newly minted serials to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty information for token",
        "params": {
          "_salePrice": "Sale price for the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAllowedMinters(address[])": {
        "details": "Set the allowed minters array for a given serial id This requires that msg.sender is the owner of the given serial id.",
        "params": {
          "_allowedMinters": "list of addresses allowed to mint this serial"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Get URI for given token id",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "base64-encoded json metadata object"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSerialURLs(string,string)": {
        "details": "Allows for updates of serial urls by the owner of the serial. Only URLs can be updated (data-uris are supported), hashes cannot be updated."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is a smart contract for handling dynamic contract minting.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 235,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1703,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1952,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 437,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 439,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 443,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 447,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 451,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 457,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1253,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4908,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "description",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 4910,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "animationUrl",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 4912,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "animationHash",
        "offset": 0,
        "slot": "203",
        "type": "t_bytes32"
      },
      {
        "astId": 4914,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "imageUrl",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 4916,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "imageHash",
        "offset": 0,
        "slot": "205",
        "type": "t_bytes32"
      },
      {
        "astId": 4918,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "serialSize",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 4920,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "atSerialId",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 4922,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "royaltyBPS",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 4925,
        "contract": "contracts/SingleEditionMintable.sol:SingleEditionMintable",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}