{
  "address": "0x3eEC861B6DCF7B45D287b3a6DEcA4aF18d2F0290",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "OnNewRelease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseStatus",
          "type": "bool"
        }
      ],
      "name": "OnPauseChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mintableAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintableCollection",
          "type": "uint256"
        }
      ],
      "name": "createRelease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "getRelease",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "maxAllowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentReleased",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethPrice",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "mintableAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "mintableCollection",
              "type": "uint256"
            }
          ],
          "internalType": "struct SeriesSale.SketchRelease",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "releaseId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbab63677a8a54348bd4538b82008be11b75dfec6a21d881838d8e4d7660fdc95",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0x3eEC861B6DCF7B45D287b3a6DEcA4aF18d2F0290",
    "transactionIndex": 1,
    "gasUsed": "765256",
    "logsBloom": "0x
    "blockHash": "0xbd3416ecb39e237b20dd4974b63afa57192c00d61e7b4dcce7c047f9046628a8",
    "transactionHash": "0xbab63677a8a54348bd4538b82008be11b75dfec6a21d881838d8e4d7660fdc95",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18723652,
        "transactionHash": "0xbab63677a8a54348bd4538b82008be11b75dfec6a21d881838d8e4d7660fdc95",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000015bff860568000000000000000000000000000000000000000000000000000024ab1dc0bb86600000000000000000000000000000000000000000000000163baa222fabd82b4da0000000000000000000000000000000000000000000000000234f1e3ab61e600000000000000000000000000000000000000000000000163bab7e2f31dd934da",
        "logIndex": 6,
        "blockHash": "0xbd3416ecb39e237b20dd4974b63afa57192c00d61e7b4dcce7c047f9046628a8"
      }
    ],
    "blockNumber": 18723652,
    "cumulativeGasUsed": "1086831",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "26bc9eaa72bafdec360511c19de0b3e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"OnNewRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"name\":\"OnPauseChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintableAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintableCollection\",\"type\":\"uint256\"}],\"name\":\"createRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"getRelease\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentReleased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintableAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintableCollection\",\"type\":\"uint256\"}],\"internalType\":\"struct SeriesSale.SketchRelease\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"releaseId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverERC20(address,uint256)\":{\"notice\":\"Recover accidental tokens sent to contract\"},\"recoverETH()\":{\"notice\":\"Recover accidental ETH sent to contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SeriesSale.sol\":\"SeriesSale\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"contracts/FundsRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ncontract FundsRecoverable is OwnableUpgradeable {\\n    /**\\n    Recover accidental tokens sent to contract\\n    */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        public\\n        onlyOwner\\n    {\\n        IERC20Upgradeable(tokenAddress).transfer(msg.sender, tokenAmount);\\n    }\\n\\n    /**\\n    Recover accidental ETH sent to contract\\n    */\\n    function recoverETH() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: balance}(\\\"\\\");\\n        require(success, \\\"TransferFailed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x36757dec843ad8e93fcc075c96efbff049cf4c401c27fb7c3d2341fba32d21dc\",\"license\":\"GPL-3.0\"},\"contracts/ISerialSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\ninterface ISerialSingleMintable {\\n  function mintSerial(address to) external returns (uint256);\\n  function mintSerials(address[] memory to) external returns (uint256);\\n}\",\"keccak256\":\"0x05f1b234ea62f191141b44ea9b98cb75811939b095e5774a7e9af26e9609234e\",\"license\":\"GPL-3.0\"},\"contracts/SeriesSale.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./ISerialSingleMintable.sol\\\";\\nimport \\\"./FundsRecoverable.sol\\\";\\n\\ncontract SeriesSale is ReentrancyGuardUpgradeable, FundsRecoverable {\\n    event OnPauseChange(uint256 releaseId, bool pauseStatus);\\n    event OnNewRelease(uint256 releaseId);\\n\\n    struct SketchRelease {\\n        bool isPaused;\\n        uint256 maxAllowed;\\n        uint256 currentReleased;\\n        uint256 ethPrice;\\n        address payable recipient;\\n        address mintableAddress;\\n        uint256 mintableCollection;\\n    }\\n\\n    SketchRelease[] private releases;\\n\\n    function createRelease(\\n        bool isPaused,\\n        uint256 maxAllowed,\\n        uint256 ethPrice,\\n        address payable recipient,\\n        address mintableAddress,\\n        uint256 mintableCollection\\n    ) public onlyOwner {\\n        SketchRelease memory sketchRelease;\\n        sketchRelease.isPaused = isPaused;\\n        sketchRelease.maxAllowed = maxAllowed;\\n        sketchRelease.recipient = recipient;\\n        sketchRelease.ethPrice = ethPrice;\\n        sketchRelease.mintableAddress = mintableAddress;\\n        sketchRelease.mintableCollection = mintableCollection;\\n\\n        emit OnNewRelease(releases.length);\\n        releases.push(sketchRelease);\\n    }\\n\\n    function setPaused(uint256 releaseId, bool isPaused) public onlyOwner {\\n        releases[releaseId].isPaused = isPaused;\\n        emit OnPauseChange(releaseId, isPaused);\\n    }\\n\\n    function getRelease(uint256 releaseId)\\n        public\\n        view\\n        returns (SketchRelease memory)\\n    {\\n        return releases[releaseId];\\n    }\\n\\n    function mint(uint256 releaseId)\\n        public\\n        payable\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        SketchRelease memory release = getRelease(releaseId);\\n        require(release.currentReleased < release.maxAllowed, \\\"FINISHED\\\");\\n        require(!release.isPaused, \\\"PAUSED\\\");\\n\\n        if (release.ethPrice > 0) {\\n            require(release.ethPrice == msg.value, \\\"PRICE\\\");\\n            (bool sent, ) = release.recipient.call{\\n                value: msg.value,\\n                gas: 30_000\\n            }(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        releases[releaseId].currentReleased += 1;\\n        uint256 mintedToken = ISerialSingleMintable(release.mintableAddress)\\n            .mintSerial(msg.sender);\\n\\n        return mintedToken;\\n    }\\n}\\n\",\"keccak256\":\"0xbe22d0cff85fc7e2407cb35b4d6eab39b5beea80c224fdcbe60b91b94a405269\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ce1806100206000396000f3fe6080604052600436106100765760003560e01c80630614117a1461007b578063715018a61461009257806379af2b9a146100a75780638219e69c146101365780638980f11f146101565780638da5cb5b14610176578063a0712d68146101a3578063daff97b5146101c4578063f2fde38b146101e4575b600080fd5b34801561008757600080fd5b50610090610204565b005b34801561009e57600080fd5b506100906102cb565b3480156100b357600080fd5b506100c76100c2366004610bb5565b610306565b60405161012d9190600060e082019050825115158252602083015160208301526040830151604083015260608301516060830152608083015160018060a01b0380821660808501528060a08601511660a0850152505060c083015160c083015292915050565b60405180910390f35b34801561014257600080fd5b50610090610151366004610b4e565b610397565b34801561016257600080fd5b50610090610171366004610b05565b6105a6565b34801561018257600080fd5b5061018b61065a565b6040516001600160a01b03909116815260200161012d565b6101b66101b1366004610bb5565b610669565b60405190815260200161012d565b3480156101d057600080fd5b506100906101df366004610be7565b6108fa565b3480156101f057600080fd5b506100906101ff366004610ae1565b61099e565b3361020d61065a565b6001600160a01b03161461023c5760405162461bcd60e51b815260040161023390610c17565b60405180910390fd5b6040514790600090339083908381818185875af1925050503d8060008114610280576040519150601f19603f3d011682016040523d82523d6000602084013e610285565b606091505b50509050806102c75760405162461bcd60e51b815260206004820152600e60248201526d151c985b9cd9995c91985a5b195960921b6044820152606401610233565b5050565b336102d461065a565b6001600160a01b0316146102fa5760405162461bcd60e51b815260040161023390610c17565b6103046000610a3e565b565b61030e610a90565b6097828154811061032157610321610c72565b60009182526020918290206040805160e0810182526007909302909101805460ff16151583526001810154938301939093526002830154908201526003820154606082015260048201546001600160a01b03908116608083015260058301541660a082015260069091015460c082015292915050565b336103a061065a565b6001600160a01b0316146103c65760405162461bcd60e51b815260040161023390610c17565b6103ce610a90565b861515815260208082018790526001600160a01b03858116608084015260608301879052841660a083015260c082018390526097546040519081527f05d69bbffed50f16c489779926c29eaf0a74ad3b9cc7714c7b00a064350ef420910160405180910390a160978054600181018255600091909152815160079091027f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff98101805492151560ff199093169290921790915560208201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffa82015560408201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffb82015560608201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffc82015560808201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffd820180546001600160a01b039283166001600160a01b03199182161790915560a08401517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffe8401805491909316911617905560c0909101517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944fff90910155505050505050565b336105af61065a565b6001600160a01b0316146105d55760405162461bcd60e51b815260040161023390610c17565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190610b31565b505050565b6065546001600160a01b031690565b6000600260015414156106be5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610233565b600260015560006106ce83610306565b905080602001518160400151106107125760405162461bcd60e51b81526020600482015260086024820152671192539254d2115160c21b6044820152606401610233565b80511561074a5760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b6044820152606401610233565b606081015115610834573481606001511461078f5760405162461bcd60e51b8152602060048201526005602482015264505249434560d81b6044820152606401610233565b600081608001516001600160a01b03163461753090604051600060405180830381858888f193505050503d80600081146107e5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ea565b606091505b50509050806108325760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610233565b505b60016097848154811061084957610849610c72565b906000526020600020906007020160020160008282546108699190610c4c565b909155505060a0810151604051630acfae8960e11b81523360048201526000916001600160a01b03169063159f5d1290602401602060405180830381600087803b1580156108b657600080fd5b505af11580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee9190610bce565b60018055949350505050565b3361090361065a565b6001600160a01b0316146109295760405162461bcd60e51b815260040161023390610c17565b806097838154811061093d5761093d610c72565b6000918252602091829020600790910201805460ff19169215159290921790915560408051848152831515928101929092527f644c35128b2d45fe1b834c79f4920da74938730dc54ca1bc0e7cba46b303a01a910160405180910390a15050565b336109a761065a565b6001600160a01b0316146109cd5760405162461bcd60e51b815260040161023390610c17565b6001600160a01b038116610a325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610233565b610a3b81610a3e565b50565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040518060e0016040528060001515815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081525090565b600060208284031215610af357600080fd5b8135610afe81610c88565b9392505050565b60008060408385031215610b1857600080fd5b8235610b2381610c88565b946020939093013593505050565b600060208284031215610b4357600080fd5b8151610afe81610c9d565b60008060008060008060c08789031215610b6757600080fd5b8635610b7281610c9d565b955060208701359450604087013593506060870135610b9081610c88565b92506080870135610ba081610c88565b8092505060a087013590509295509295509295565b600060208284031215610bc757600080fd5b5035919050565b600060208284031215610be057600080fd5b5051919050565b60008060408385031215610bfa57600080fd5b823591506020830135610c0c81610c9d565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610c6d57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610a3b57600080fd5b8015158114610a3b57600080fdfea2646970667358221220b463e002e6a6ede047f1da67d88b665887b74f0d788cfaba304765344fbf6ab164736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106100765760003560e01c80630614117a1461007b578063715018a61461009257806379af2b9a146100a75780638219e69c146101365780638980f11f146101565780638da5cb5b14610176578063a0712d68146101a3578063daff97b5146101c4578063f2fde38b146101e4575b600080fd5b34801561008757600080fd5b50610090610204565b005b34801561009e57600080fd5b506100906102cb565b3480156100b357600080fd5b506100c76100c2366004610bb5565b610306565b60405161012d9190600060e082019050825115158252602083015160208301526040830151604083015260608301516060830152608083015160018060a01b0380821660808501528060a08601511660a0850152505060c083015160c083015292915050565b60405180910390f35b34801561014257600080fd5b50610090610151366004610b4e565b610397565b34801561016257600080fd5b50610090610171366004610b05565b6105a6565b34801561018257600080fd5b5061018b61065a565b6040516001600160a01b03909116815260200161012d565b6101b66101b1366004610bb5565b610669565b60405190815260200161012d565b3480156101d057600080fd5b506100906101df366004610be7565b6108fa565b3480156101f057600080fd5b506100906101ff366004610ae1565b61099e565b3361020d61065a565b6001600160a01b03161461023c5760405162461bcd60e51b815260040161023390610c17565b60405180910390fd5b6040514790600090339083908381818185875af1925050503d8060008114610280576040519150601f19603f3d011682016040523d82523d6000602084013e610285565b606091505b50509050806102c75760405162461bcd60e51b815260206004820152600e60248201526d151c985b9cd9995c91985a5b195960921b6044820152606401610233565b5050565b336102d461065a565b6001600160a01b0316146102fa5760405162461bcd60e51b815260040161023390610c17565b6103046000610a3e565b565b61030e610a90565b6097828154811061032157610321610c72565b60009182526020918290206040805160e0810182526007909302909101805460ff16151583526001810154938301939093526002830154908201526003820154606082015260048201546001600160a01b03908116608083015260058301541660a082015260069091015460c082015292915050565b336103a061065a565b6001600160a01b0316146103c65760405162461bcd60e51b815260040161023390610c17565b6103ce610a90565b861515815260208082018790526001600160a01b03858116608084015260608301879052841660a083015260c082018390526097546040519081527f05d69bbffed50f16c489779926c29eaf0a74ad3b9cc7714c7b00a064350ef420910160405180910390a160978054600181018255600091909152815160079091027f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff98101805492151560ff199093169290921790915560208201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffa82015560408201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffb82015560608201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffc82015560808201517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffd820180546001600160a01b039283166001600160a01b03199182161790915560a08401517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ffe8401805491909316911617905560c0909101517f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944fff90910155505050505050565b336105af61065a565b6001600160a01b0316146105d55760405162461bcd60e51b815260040161023390610c17565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b15801561061d57600080fd5b505af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190610b31565b505050565b6065546001600160a01b031690565b6000600260015414156106be5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610233565b600260015560006106ce83610306565b905080602001518160400151106107125760405162461bcd60e51b81526020600482015260086024820152671192539254d2115160c21b6044820152606401610233565b80511561074a5760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b6044820152606401610233565b606081015115610834573481606001511461078f5760405162461bcd60e51b8152602060048201526005602482015264505249434560d81b6044820152606401610233565b600081608001516001600160a01b03163461753090604051600060405180830381858888f193505050503d80600081146107e5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ea565b606091505b50509050806108325760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610233565b505b60016097848154811061084957610849610c72565b906000526020600020906007020160020160008282546108699190610c4c565b909155505060a0810151604051630acfae8960e11b81523360048201526000916001600160a01b03169063159f5d1290602401602060405180830381600087803b1580156108b657600080fd5b505af11580156108ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ee9190610bce565b60018055949350505050565b3361090361065a565b6001600160a01b0316146109295760405162461bcd60e51b815260040161023390610c17565b806097838154811061093d5761093d610c72565b6000918252602091829020600790910201805460ff19169215159290921790915560408051848152831515928101929092527f644c35128b2d45fe1b834c79f4920da74938730dc54ca1bc0e7cba46b303a01a910160405180910390a15050565b336109a761065a565b6001600160a01b0316146109cd5760405162461bcd60e51b815260040161023390610c17565b6001600160a01b038116610a325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610233565b610a3b81610a3e565b50565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040518060e0016040528060001515815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081525090565b600060208284031215610af357600080fd5b8135610afe81610c88565b9392505050565b60008060408385031215610b1857600080fd5b8235610b2381610c88565b946020939093013593505050565b600060208284031215610b4357600080fd5b8151610afe81610c9d565b60008060008060008060c08789031215610b6757600080fd5b8635610b7281610c9d565b955060208701359450604087013593506060870135610b9081610c88565b92506080870135610ba081610c88565b8092505060a087013590509295509295509295565b600060208284031215610bc757600080fd5b5035919050565b600060208284031215610be057600080fd5b5051919050565b60008060408385031215610bfa57600080fd5b823591506020830135610c0c81610c9d565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610c6d57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114610a3b57600080fd5b8015158114610a3b57600080fdfea2646970667358221220b463e002e6a6ede047f1da67d88b665887b74f0d788cfaba304765344fbf6ab164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverERC20(address,uint256)": {
        "notice": "Recover accidental tokens sent to contract"
      },
      "recoverETH()": {
        "notice": "Recover accidental ETH sent to contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 235,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 286,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 329,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1703,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3711,
        "contract": "contracts/SeriesSale.sol:SeriesSale",
        "label": "releases",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_struct(SketchRelease)3707_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(SketchRelease)3707_storage)dyn_storage": {
        "base": "t_struct(SketchRelease)3707_storage",
        "encoding": "dynamic_array",
        "label": "struct SeriesSale.SketchRelease[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_struct(SketchRelease)3707_storage": {
        "encoding": "inplace",
        "label": "struct SeriesSale.SketchRelease",
        "members": [
          {
            "astId": 3694,
            "contract": "contracts/SeriesSale.sol:SeriesSale",
            "label": "isPaused",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3696,
            "contract": "contracts/SeriesSale.sol:SeriesSale",
            "label": "maxAllowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3698,
            "contract": "contracts/SeriesSale.sol:SeriesSale",
            "label": "currentReleased",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3700,
            "contract": "contracts/SeriesSale.sol:SeriesSale",
            "label": "ethPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3702,
            "contract": "contracts/SeriesSale.sol:SeriesSale",
            "label": "recipient",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 3704,
            "contract": "contracts/SeriesSale.sol:SeriesSale",
            "label": "mintableAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3706,
            "contract": "contracts/SeriesSale.sol:SeriesSale",
            "label": "mintableCollection",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}