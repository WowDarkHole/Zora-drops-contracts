/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SingleEditionSeriesSaleInterface extends ethers.utils.Interface {
  functions: {
    "createRelease(bool,uint256,uint256,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "releases(uint256)": FunctionFragment;
    "setPaused(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRelease",
    values: [boolean, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "releases",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "releases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;

  events: {
    "OnNewRelease(uint256)": EventFragment;
    "OnPauseChange(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnNewRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnPauseChange"): EventFragment;
}

export class SingleEditionSeriesSale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SingleEditionSeriesSaleInterface;

  functions: {
    createRelease(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRelease(bool,uint256,uint256,address)"(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      releaseId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      releaseId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    releases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maxAllowed: BigNumber;
      currentReleased: BigNumber;
      ethPrice: BigNumber;
      mintable: string;
      isPaused: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    "releases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maxAllowed: BigNumber;
      currentReleased: BigNumber;
      ethPrice: BigNumber;
      mintable: string;
      isPaused: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  createRelease(
    isPaused: boolean,
    maxAllowed: BigNumberish,
    ethPrice: BigNumberish,
    mintable: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRelease(bool,uint256,uint256,address)"(
    isPaused: boolean,
    maxAllowed: BigNumberish,
    ethPrice: BigNumberish,
    mintable: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    releaseId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    releaseId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  releases(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    maxAllowed: BigNumber;
    currentReleased: BigNumber;
    ethPrice: BigNumber;
    mintable: string;
    isPaused: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
  }>;

  "releases(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    maxAllowed: BigNumber;
    currentReleased: BigNumber;
    ethPrice: BigNumber;
    mintable: string;
    isPaused: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
  }>;

  setPaused(
    releaseId: BigNumberish,
    isPaused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaused(uint256,bool)"(
    releaseId: BigNumberish,
    isPaused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    createRelease(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createRelease(bool,uint256,uint256,address)"(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256)"(
      releaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maxAllowed: BigNumber;
      currentReleased: BigNumber;
      ethPrice: BigNumber;
      mintable: string;
      isPaused: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    "releases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maxAllowed: BigNumber;
      currentReleased: BigNumber;
      ethPrice: BigNumber;
      mintable: string;
      isPaused: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OnNewRelease(releaseId: null): EventFilter;

    OnPauseChange(releaseId: null, pauseStatus: null): EventFilter;
  };

  estimateGas: {
    createRelease(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createRelease(bool,uint256,uint256,address)"(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      releaseId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "mint(uint256)"(
      releaseId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    releases(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "releases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRelease(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRelease(bool,uint256,uint256,address)"(
      isPaused: boolean,
      maxAllowed: BigNumberish,
      ethPrice: BigNumberish,
      mintable: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      releaseId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      releaseId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    releases(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "releases(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPaused(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaused(uint256,bool)"(
      releaseId: BigNumberish,
      isPaused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
