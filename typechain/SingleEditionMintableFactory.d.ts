/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SingleEditionMintableCreatorInterface extends ethers.utils.Interface {
  functions: {
    "createSerial(string,string,string,string,bytes32,string,bytes32,uint256,uint256)": FunctionFragment;
    "getSerialAtId(uint256)": FunctionFragment;
    "implementation()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createSerial",
    values: [
      string,
      string,
      string,
      string,
      BytesLike,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerialAtId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createSerial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerialAtId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;

  events: {
    "CreatedSerial(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedSerial"): EventFragment;
}

export class SingleEditionMintableCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SingleEditionMintableCreatorInterface;

  functions: {
    createSerial(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createSerial(string,string,string,string,bytes32,string,bytes32,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSerialAtId(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getSerialAtId(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    implementation(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "implementation()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  createSerial(
    _name: string,
    _symbol: string,
    _description: string,
    _animationUrl: string,
    _animationHash: BytesLike,
    _imageUrl: string,
    _imageHash: BytesLike,
    _serialSize: BigNumberish,
    _royaltyBPS: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createSerial(string,string,string,string,bytes32,string,bytes32,uint256,uint256)"(
    _name: string,
    _symbol: string,
    _description: string,
    _animationUrl: string,
    _animationHash: BytesLike,
    _imageUrl: string,
    _imageHash: BytesLike,
    _serialSize: BigNumberish,
    _royaltyBPS: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSerialAtId(
    serialId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getSerialAtId(uint256)"(
    serialId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  "implementation()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createSerial(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createSerial(string,string,string,string,bytes32,string,bytes32,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getSerialAtId(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getSerialAtId(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    "implementation()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    CreatedSerial(serialId: null, creator: null, serialSize: null): EventFilter;
  };

  estimateGas: {
    createSerial(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createSerial(string,string,string,string,bytes32,string,bytes32,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSerialAtId(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSerialAtId(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    "implementation()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createSerial(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createSerial(string,string,string,string,bytes32,string,bytes32,uint256,uint256)"(
      _name: string,
      _symbol: string,
      _description: string,
      _animationUrl: string,
      _animationHash: BytesLike,
      _imageUrl: string,
      _imageHash: BytesLike,
      _serialSize: BigNumberish,
      _royaltyBPS: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSerialAtId(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSerialAtId(uint256)"(
      serialId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "implementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
